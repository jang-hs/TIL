(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{338:function(t,a,v){"use strict";v.r(a);var _=v(27),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"apache-spark-rdd-resilient-distributed-dataset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apache-spark-rdd-resilient-distributed-dataset"}},[t._v("#")]),t._v(" Apache Spark RDD(Resilient Distributed Dataset)")]),t._v(" "),a("p",[t._v("Apache Spark의 RDD(Resilient Distributed Dataset)는 Spark의 핵심 데이터 추상화로, 대규모 데이터를 분산 환경에서 효율적으로 처리하기 위한 불변성(immutable) 및 분산(distributed) 데이터 구조입니다. RDD는 분산 데이터 처리를 간소화하고 신뢰성을 보장하기 위해 설계되었습니다.")]),t._v(" "),a("h2",{attrs:{id:"rdd의-주요-특징"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd의-주요-특징"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD의 주요 특징")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Resilient (탄력성)")]),t._v(" "),a("ul",[a("li",[t._v("RDD는 장애 복구가 가능합니다.")]),t._v(" "),a("li",[t._v("데이터는 변환 내역(계보, lineage)을 저장하며, 일부 파티션이 손실되더라도 lineage를 기반으로 재생성할 수 있습니다.")])])]),t._v(" "),a("li",[a("strong",[t._v("Distributed (분산)")]),t._v(" "),a("ul",[a("li",[t._v("RDD는 클러스터의 여러 노드에 걸쳐 데이터를 저장하고 계산을 분산 처리합니다.")]),t._v(" "),a("li",[t._v("각 파티션은 클러스터 내 워커 노드에 분산되어 작업을 병렬로 실행.")])])]),t._v(" "),a("li",[a("strong",[t._v("Immutable (불변성)")]),t._v(" "),a("ul",[a("li",[t._v("RDD는 생성 후 변경이 불가능하며, 데이터 변환은 새로운 RDD를 생성합니다.")]),t._v(" "),a("li",[t._v("이는 데이터의 신뢰성을 높이고 병렬 처리를 쉽게 만듭니다.")])])]),t._v(" "),a("li",[a("strong",[t._v("Lazy Evaluation (지연 평가)")]),t._v(" "),a("ul",[a("li",[t._v("RDD 변환(transformations)은 즉시 실행되지 않고, 실행이 필요할 때(예: 액션 수행 시) 연산이 평가됩니다.")]),t._v(" "),a("li",[t._v("이를 통해 최적화된 실행 계획(DAG: Directed Acyclic Graph)이 생성됩니다.")])])]),t._v(" "),a("li",[a("strong",[t._v("In-Memory Computing (메모리 기반 연산)")]),t._v(" "),a("ul",[a("li",[t._v("RDD는 데이터를 메모리에 저장하여 I/O 오버헤드를 줄이고 처리 속도를 향상시킵니다.")]),t._v(" "),a("li",[t._v("디스크 기반 연산도 지원.")])])])]),t._v(" "),a("h2",{attrs:{id:"rdd의-주요-구성-요소"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd의-주요-구성-요소"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD의 주요 구성 요소")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("데이터 분할 (Partitions)")]),t._v(" "),a("ul",[a("li",[t._v("RDD는 여러 파티션으로 분리되며, 각 파티션은 클러스터 노드에서 병렬로 처리됩니다.")])])]),t._v(" "),a("li",[a("strong",[t._v("변환(Transformations)")]),t._v(" "),a("ul",[a("li",[t._v("RDD에서 새로운 RDD를 생성하는 연산으로, "),a("strong",[t._v("Lazy Evaluation")]),t._v("을 따릅니다.")]),t._v(" "),a("li",[t._v("예: "),a("code",[t._v("map")]),t._v(", "),a("code",[t._v("filter")]),t._v(", "),a("code",[t._v("flatMap")]),t._v(", "),a("code",[t._v("distinct")]),t._v(", "),a("code",[t._v("groupByKey")]),t._v(", "),a("code",[t._v("reduceByKey")]),t._v(".")])])]),t._v(" "),a("li",[a("strong",[t._v("액션(Actions)")]),t._v(" "),a("ul",[a("li",[t._v("변환 결과를 클러스터에서 수집하거나 저장하는 연산으로, 연산을 실행합니다.")]),t._v(" "),a("li",[t._v("예: "),a("code",[t._v("collect")]),t._v(", "),a("code",[t._v("count")]),t._v(", "),a("code",[t._v("reduce")]),t._v(", "),a("code",[t._v("saveAsTextFile")]),t._v(", "),a("code",[t._v("foreach")]),t._v(".")])])]),t._v(" "),a("li",[a("strong",[t._v("계보(Lineage)")]),t._v(" "),a("ul",[a("li",[t._v("RDD가 생성된 변환 내역을 추적하여 장애 시 데이터 복구에 사용.")])])])]),t._v(" "),a("h2",{attrs:{id:"rdd-생성-방법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd-생성-방법"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD 생성 방법")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("외부 데이터 로드")]),t._v(" "),a("ul",[a("li",[t._v("파일 시스템, HDFS, Cassandra, HBase 등에서 데이터를 로드하여 생성.")])])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("rdd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sparkContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hdfs://path/to/file"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("컬렉션에서 변환")]),t._v(" "),a("ul",[a("li",[t._v("로컬 데이터 컬렉션을 병렬화하여 생성.")])])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("rdd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sparkContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parallelize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("변환을 통한 생성")]),t._v(" "),a("ul",[a("li",[t._v("기존 RDD에 변환을 적용하여 새로운 RDD 생성.")])])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("rdd2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rdd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"rdd의-transformations-예시"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd의-transformations-예시"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD의 Transformations 예시")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("연산")]),t._v(" "),a("th",[t._v("설명")]),t._v(" "),a("th",[t._v("예시")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("map")])]),t._v(" "),a("td",[t._v("각 요소에 대해 주어진 함수를 적용")]),t._v(" "),a("td",[a("code",[t._v("rdd.map(lambda x: x * 2)")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("filter")])]),t._v(" "),a("td",[t._v("주어진 조건을 만족하는 요소만 선택")]),t._v(" "),a("td",[a("code",[t._v("rdd.filter(lambda x: x > 10)")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("flatMap")])]),t._v(" "),a("td",[t._v("각 입력 요소를 여러 출력 요소로 매핑")]),t._v(" "),a("td",[a("code",[t._v('rdd.flatMap(lambda x: x.split(" "))')])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("distinct")])]),t._v(" "),a("td",[t._v("중복을 제거")]),t._v(" "),a("td",[a("code",[t._v("rdd.distinct()")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("reduceByKey")])]),t._v(" "),a("td",[t._v("동일 키를 가진 요소들을 지정된 함수로 병합")]),t._v(" "),a("td",[a("code",[t._v("rdd.reduceByKey(lambda x, y: x + y)")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("join")])]),t._v(" "),a("td",[t._v("두 RDD를 키를 기준으로 조인")]),t._v(" "),a("td",[a("code",[t._v("rdd1.join(rdd2)")])])])])]),t._v(" "),a("h2",{attrs:{id:"rdd의-actions-예시"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd의-actions-예시"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD의 Actions 예시")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("연산")]),t._v(" "),a("th",[t._v("설명")]),t._v(" "),a("th",[t._v("예시")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("collect")])]),t._v(" "),a("td",[t._v("모든 데이터를 드라이버 프로그램으로 반환")]),t._v(" "),a("td",[a("code",[t._v("rdd.collect()")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("count")])]),t._v(" "),a("td",[t._v("RDD의 요소 개수를 반환")]),t._v(" "),a("td",[a("code",[t._v("rdd.count()")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("reduce")])]),t._v(" "),a("td",[t._v("주어진 함수를 사용해 RDD의 모든 요소를 병합")]),t._v(" "),a("td",[a("code",[t._v("rdd.reduce(lambda x, y: x + y)")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("take")])]),t._v(" "),a("td",[t._v("상위 N개의 요소를 반환")]),t._v(" "),a("td",[a("code",[t._v("rdd.take(10)")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("saveAsTextFile")])]),t._v(" "),a("td",[t._v("데이터를 텍스트 파일로 저장")]),t._v(" "),a("td",[a("code",[t._v('rdd.saveAsTextFile("output/path")')])])])])]),t._v(" "),a("h2",{attrs:{id:"rdd의-장단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd의-장단점"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD의 장단점")])]),t._v(" "),a("h3",{attrs:{id:"장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#장점"}},[t._v("#")]),t._v(" 장점")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("유연성:")]),t._v(" 데이터의 다양한 변환 및 액션 지원.")]),t._v(" "),a("li",[a("strong",[t._v("확장성:")]),t._v(" 대규모 데이터를 쉽게 분산 처리.")]),t._v(" "),a("li",[a("strong",[t._v("장애 복구:")]),t._v(" 계보를 통한 데이터 복구 가능.")])]),t._v(" "),a("h3",{attrs:{id:"단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#단점"}},[t._v("#")]),t._v(" 단점")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("메모리 요구량:")]),t._v(" 큰 데이터셋을 처리할 때 메모리 소모가 큼.")]),t._v(" "),a("li",[a("strong",[t._v("복잡성:")]),t._v(" 고수준 API(DataFrame, Dataset)에 비해 사용법이 복잡.")]),t._v(" "),a("li",[a("strong",[t._v("최적화 한계:")]),t._v(" DataFrame/Dataset에 비해 실행 최적화가 제한적.")])]),t._v(" "),a("h2",{attrs:{id:"rdd와-dataframe-dataset의-비교"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd와-dataframe-dataset의-비교"}},[t._v("#")]),t._v(" "),a("strong",[t._v("RDD와 DataFrame/Dataset의 비교")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("특징")]),t._v(" "),a("th",[t._v("RDD")]),t._v(" "),a("th",[t._v("DataFrame")]),t._v(" "),a("th",[t._v("Dataset")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("데이터 추상화 수준")])]),t._v(" "),a("td",[t._v("저수준 (Row-by-Row 연산)")]),t._v(" "),a("td",[t._v("고수준 (스키마 기반)")]),t._v(" "),a("td",[t._v("고수준 (스키마 기반 + 타입 세이프)")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("최적화")])]),t._v(" "),a("td",[t._v("제한적 (RDD 계보 사용)")]),t._v(" "),a("td",[t._v("Catalyst Optimizer 사용")]),t._v(" "),a("td",[t._v("Catalyst Optimizer 사용")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("유형")])]),t._v(" "),a("td",[t._v("Java/Python 객체")]),t._v(" "),a("td",[t._v("Row 객체")]),t._v(" "),a("td",[t._v("사용자 정의 객체")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("퍼포먼스")])]),t._v(" "),a("td",[t._v("느림")]),t._v(" "),a("td",[t._v("빠름")]),t._v(" "),a("td",[t._v("빠름")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);