(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{342:function(t,e,v){"use strict";v.r(e);var _=v(27),r=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"distributed-job-scheduler-system-design"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#distributed-job-scheduler-system-design"}},[t._v("#")]),t._v(" Distributed Job Scheduler system design")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://dilipkumar.medium.com/distributed-job-scheduler-system-design-8ae13a8dee83",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Job Scheduler system design"),e("OutboundLink")],1),t._v(" 를 읽고 정리한 내용입니다.")]),t._v(" "),e("p",[t._v("대량의 user-submitted jobs을 확장 가능하고 내결함성 있게 관리, 추적 및 실행할 수 있는 분산 작업 스케줄러를 설계합니다.")]),t._v(" "),e("h2",{attrs:{id:"high-level-system-design"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#high-level-system-design"}},[t._v("#")]),t._v(" High level system design")]),t._v(" "),e("p",[t._v("다음은 분산 작업 스케줄러의 고수준 시스템 설계(high level system design)입니다.\n"),e("img",{attrs:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*crfre3LahxotOEyH7UQQ5w.png",alt:""}})]),t._v(" "),e("p",[t._v("각 서비스를 자세히 살펴보겠습니다.")]),t._v(" "),e("h3",{attrs:{id:"job-submission-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#job-submission-service"}},[t._v("#")]),t._v(" Job Submission Service")]),t._v(" "),e("p",[t._v("Job submission service는 "),e("code",[t._v("Jobs")]),t._v(" 테이블에 기록합니다. "),e("code",[t._v("Jobs")]),t._v(" 테이블의 스키마는 "),e("code",[t._v("UserId+JobId")]),t._v("를 기본 키로, "),e("code",[t._v("UserId")]),t._v("를 샤드 키로 사용합니다.")]),t._v(" "),e("blockquote",[e("p",[t._v("샤드 키(shard key)는 분산 시스템에서 데이터를 여러 서버(샤드)에 나누어 저장할 때 데이터를 어떻게 분배할지를 결정하는 기준이 되는 키입니다. 데이터베이스가 수평적으로 확장되기 위해서는 데이터를 여러 샤드로 나누어 저장하는 것이 효율적이며, 이를 통해 시스템의 성능과 처리 용량을 높일 수 있습니다.")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("UserId")]),t._v(" "),e("th",[t._v("JobId")]),t._v(" "),e("th",[t._v("IsRecurring")]),t._v(" "),e("th",[t._v("Interval")]),t._v(" "),e("th",[t._v("MaxRetry")]),t._v(" "),e("th",[t._v("CreateTimestamp")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("True")]),t._v(" "),e("td",[t._v("0 */2 * * *")]),t._v(" "),e("td",[t._v("3")]),t._v(" "),e("td",[t._v("t1")])]),t._v(" "),e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("2")]),t._v(" "),e("td",[t._v("True")]),t._v(" "),e("td",[t._v("0 */6 * * *")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("t2")])]),t._v(" "),e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("3")]),t._v(" "),e("td",[t._v("True")]),t._v(" "),e("td",[t._v("0 0 * * *")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("t3")])]),t._v(" "),e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("4")]),t._v(" "),e("td",[t._v("False")]),t._v(" "),e("td",[t._v("NULL")]),t._v(" "),e("td",[t._v("3")]),t._v(" "),e("td",[t._v("t4")])]),t._v(" "),e("tr",[e("td",[t._v("2")]),t._v(" "),e("td",[t._v("5")]),t._v(" "),e("td",[t._v("False")]),t._v(" "),e("td",[t._v("NULL")]),t._v(" "),e("td",[t._v("3")]),t._v(" "),e("td",[t._v("t4")])])])]),t._v(" "),e("p",[t._v("Job submission은 또한 작업을 분석하고 "),e("code",[t._v("ScheduledJob")]),t._v(" 큐에 작업 주기에 따라 TTL을 설정하여 대기열에 추가합니다. "),e("code",[t._v("ScheduledJob")]),t._v("은 다음 스키마를 사용하여 예약된 작업을 저장하며, "),e("code",[t._v("NextExecutionTimestamp")]),t._v("가 샤드 키로 사용됩니다. 타임스탬프 기반 샤드 키는 대기열 시스템이 매 분마다 같은 위치에 있는 작업을 가져오도록 돕습니다.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("NextExecutionTimestamp")]),t._v(" "),e("th",[t._v("JobId")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("T1")]),t._v(" "),e("td",[t._v("1")])]),t._v(" "),e("tr",[e("td",[t._v("T1")]),t._v(" "),e("td",[t._v("2")])]),t._v(" "),e("tr",[e("td",[t._v("T1")]),t._v(" "),e("td",[t._v("3")])])])]),t._v(" "),e("h3",{attrs:{id:"scheduler-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-service"}},[t._v("#")]),t._v(" Scheduler Service")]),t._v(" "),e("p",[t._v("스케줄러 서비스는 작업을 실행할 때 다음 두 가지 결정을 내려야 합니다.")]),t._v(" "),e("ol",[e("li",[t._v("작업이 주기적(interval)인 경우, 다음 실행 시간을 계산하고 다시 "),e("code",[t._v("ScheduledJob")]),t._v(" 큐에 대기시킵니다.")]),t._v(" "),e("li",[t._v("작업의 유형, 종속성 등을 분석하고 적절한 워커 노드를 찾아 작업을 실행합니다.")])]),t._v(" "),e("h3",{attrs:{id:"workers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workers"}},[t._v("#")]),t._v(" Workers")]),t._v(" "),e("p",[t._v("작업에 따라 여러 유형의 워커를 사용할 수 있습니다.")]),t._v(" "),e("h4",{attrs:{id:"멱등성-워커-idempotent-workers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#멱등성-워커-idempotent-workers"}},[t._v("#")]),t._v(" 멱등성 워커(Idempotent workers)")]),t._v(" "),e("p",[t._v("분산 시스템에서는 (재시도 등으로 인해) 중복 메시지가 워커에 전달될 수 있습니다. 따라서 워커는 멱등성(idempotency)을 유지해야 합니다. 즉, 두 워커가 동일한 작업을 병렬로 처리하더라도 서로 영향을 주지 않아야 합니다.")]),t._v(" "),e("h4",{attrs:{id:"비멱등성-워커-non-idempotent-workers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#비멱등성-워커-non-idempotent-workers"}},[t._v("#")]),t._v(" 비멱등성 워커(Non idempotent workers)")]),t._v(" "),e("p",[t._v("일부 작업은 특성상 여러 워커가 동일한 작업을 동시에 처리하지 않도록 해야 합니다. 이 경우 워커는 외부 저장소를 참조해 작업 진행 상태를 확인하고, 처리 중인지 확인하여 필요에 따라 작업을 계속하거나 중단합니다.\n"),e("img",{attrs:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*esM2mNiwylnfBzjJ9g6v3g.png",alt:""}})]),t._v(" "),e("h4",{attrs:{id:"단기-작업-short-running-job"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#단기-작업-short-running-job"}},[t._v("#")]),t._v(" 단기 작업(Short running job)")]),t._v(" "),e("p",[t._v("몇 초 안에 완료할 수 있는 단기 작업은 타임아웃 내에서 대기열에 응답할 수 있습니다.")]),t._v(" "),e("h4",{attrs:{id:"장기-작업-long-running-job"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#장기-작업-long-running-job"}},[t._v("#")]),t._v(" 장기 작업(Long running job)")]),t._v(" "),e("p",[t._v("일부 작업은 실행에 몇 분 혹은 몇 시간 이상 걸릴 수 있습니다. 대기열 시스템은 이 정도로 오래 기다릴 수 없으므로 이벤트가 타임아웃되어 다른 워커에게 재전달될 수 있으며, 이로 인해 동일한 작업이 여러 워커에서 재처리될 수 있습니다. 장기 작업을 처리하는 여러 방법이 있으며, 작업의 특성에 따라 다릅니다.")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("작업 처리 페이징(Paginate the job processing)")]),e("br"),t._v("\n작업 범위를 작은 청크로 나누고 페이지 방식으로 처리합니다. 이 접근 방식은 작업을 단기 작업으로 변환합니다. "),e("code",[t._v("Checkpoint")]),t._v(" 테이블을 사용해 작업 진행 상태를 확인합니다.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("JobId")]),t._v(" "),e("th",[t._v("PageSize")]),t._v(" "),e("th",[t._v("PageStart")]),t._v(" "),e("th",[t._v("IsCompleted")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("10")]),t._v(" "),e("td",[t._v("20")]),t._v(" "),e("td",[t._v("False")])]),t._v(" "),e("tr",[e("td",[t._v("2")]),t._v(" "),e("td",[t._v("10")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("False")])]),t._v(" "),e("tr",[e("td",[t._v("3")]),t._v(" "),e("td",[t._v("10")]),t._v(" "),e("td",[t._v("100")]),t._v(" "),e("td",[t._v("True")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*jbrOSm8LezA1qtdPh1O4GA.png",alt:""}})])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("장기 실행 작업을 위한 미래 메시지 대기열 추가(Enqueue message for long future)")]),e("br"),t._v("\n작업을 작은 청크로 나누기 어려운 경우 "),e("code",[t._v("JobStatus")]),t._v(" 테이블을 유지하여 처리 상태를 확인합니다.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("JobId")]),t._v(" "),e("th",[t._v("Status")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1")]),t._v(" "),e("td",[t._v("INPROGRESS")])]),t._v(" "),e("tr",[e("td",[t._v("2")]),t._v(" "),e("td",[t._v("COMPLETED")])])])])])]),t._v(" "),e("h4",{attrs:{id:"재시도-메커니즘-retry-mechanism"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#재시도-메커니즘-retry-mechanism"}},[t._v("#")]),t._v(" 재시도 메커니즘(Retry mechanism)")]),t._v(" "),e("p",[t._v("작업의 재시도 옵션에 따라 워커 노드는 메시지를 확인하거나 확인하지 않고 재전송합니다. 재시도가 가능한 작업의 경우 실패 시 메시지를 확인하고, 메시지를 새로 발행하며 재시도를 진행합니다. 재시도가 불가능한 작업은 실패 시 메시지를 확인하지 않고 중단합니다.")]),t._v(" "),e("h3",{attrs:{id:"작업-실행-이력-task-execution-history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#작업-실행-이력-task-execution-history"}},[t._v("#")]),t._v(" 작업 실행 이력(Task execution history)")]),t._v(" "),e("p",[t._v("작업 실행 완료 후 워커는 작업 실행 이력을 기록합니다. "),e("code",[t._v("TaskExecutionHistory")]),t._v(" 스키마는 다음과 같습니다.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("JobId")]),t._v(" "),e("th",[t._v("StartTime")]),t._v(" "),e("th",[t._v("CompletedTime")]),t._v(" "),e("th",[t._v("Status")]),t._v(" "),e("th",[t._v("RetryCount")])])]),t._v(" "),e("tbody")]),t._v(" "),e("h3",{attrs:{id:"보고-서비스-reporting-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#보고-서비스-reporting-service"}},[t._v("#")]),t._v(" 보고 서비스(Reporting Service)")]),t._v(" "),e("p",[t._v("보고 서비스는 "),e("code",[t._v("Jobs")]),t._v("와 "),e("code",[t._v("TaskExecutionHistory")]),t._v(" 테이블을 사용해 사용자별 작업 상태를 표시합니다.")]),t._v(" "),e("h3",{attrs:{id:"알림-및-모니터링-서비스-alerting-and-monitoring-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#알림-및-모니터링-서비스-alerting-and-monitoring-service"}},[t._v("#")]),t._v(" 알림 및 모니터링 서비스(Alerting and monitoring service)")]),t._v(" "),e("p",[t._v("작업 실패율을 모니터링 시스템에 기록하고 조건에 따라 알림 규칙을 구성할 수 있습니다.")]),t._v(" "),e("h3",{attrs:{id:"스케일링-작업-스케줄러-시스템-scale-job-scheduler-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#스케일링-작업-스케줄러-시스템-scale-job-scheduler-system"}},[t._v("#")]),t._v(" 스케일링 작업 스케줄러 시스템(Scale job scheduler system)")]),t._v(" "),e("p",[t._v("사용자와 작업의 양에 따라 각 컴포넌트를 수평으로 확장할 수 있습니다. 저장소가 적절히 분할되어 있어 수평 확장이 용이합니다.")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("reference: "),e("a",{attrs:{href:"https://dilipkumar.medium.com/distributed-job-scheduler-system-design-8ae13a8dee83",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Job Scheduler system design"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);